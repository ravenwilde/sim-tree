# source: https://us1.prisma.sh/jennifer-scroggins-e3a3bd/database/dev
# timestamp: Sun Aug 19 2018 20:52:06 GMT-0400 (Eastern Daylight Time)

type AggregatePartnership {
  count: Int!
}

type AggregateSim {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

scalar DateTime

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createSim(data: SimCreateInput!): Sim!
  createPartnership(data: PartnershipCreateInput!): Partnership!
  createUser(data: UserCreateInput!): User!
  updateSim(data: SimUpdateInput!, where: SimWhereUniqueInput!): Sim
  updatePartnership(data: PartnershipUpdateInput!, where: PartnershipWhereUniqueInput!): Partnership
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  deleteSim(where: SimWhereUniqueInput!): Sim
  deletePartnership(where: PartnershipWhereUniqueInput!): Partnership
  deleteUser(where: UserWhereUniqueInput!): User
  upsertSim(where: SimWhereUniqueInput!, create: SimCreateInput!, update: SimUpdateInput!): Sim!
  upsertPartnership(where: PartnershipWhereUniqueInput!, create: PartnershipCreateInput!, update: PartnershipUpdateInput!): Partnership!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  updateManySims(data: SimUpdateInput!, where: SimWhereInput): BatchPayload!
  updateManyPartnerships(data: PartnershipUpdateInput!, where: PartnershipWhereInput): BatchPayload!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  deleteManySims(where: SimWhereInput): BatchPayload!
  deleteManyPartnerships(where: PartnershipWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Partnership implements Node {
  id: ID!
  partners(where: SimWhereInput, orderBy: SimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sim!]
  offspring(where: SimWhereInput, orderBy: SimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sim!]
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type PartnershipConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PartnershipEdge]!
  aggregate: AggregatePartnership!
}

input PartnershipCreateInput {
  partners: SimCreateManyWithoutPartnersInput
  offspring: SimCreateManyWithoutParentsInput
  createdBy: UserCreateOneWithoutPartnershipsInput
}

input PartnershipCreateManyWithoutCreatedByInput {
  create: [PartnershipCreateWithoutCreatedByInput!]
  connect: [PartnershipWhereUniqueInput!]
}

input PartnershipCreateManyWithoutPartnersInput {
  create: [PartnershipCreateWithoutPartnersInput!]
  connect: [PartnershipWhereUniqueInput!]
}

input PartnershipCreateOneWithoutOffspringInput {
  create: PartnershipCreateWithoutOffspringInput
  connect: PartnershipWhereUniqueInput
}

input PartnershipCreateWithoutCreatedByInput {
  partners: SimCreateManyWithoutPartnersInput
  offspring: SimCreateManyWithoutParentsInput
}

input PartnershipCreateWithoutOffspringInput {
  partners: SimCreateManyWithoutPartnersInput
  createdBy: UserCreateOneWithoutPartnershipsInput
}

input PartnershipCreateWithoutPartnersInput {
  offspring: SimCreateManyWithoutParentsInput
  createdBy: UserCreateOneWithoutPartnershipsInput
}

"""An edge in a connection."""
type PartnershipEdge {
  """The item at the end of the edge."""
  node: Partnership!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PartnershipOrderByInput {
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PartnershipPreviousValues {
  id: ID!
}

type PartnershipSubscriptionPayload {
  mutation: MutationType!
  node: Partnership
  updatedFields: [String!]
  previousValues: PartnershipPreviousValues
}

input PartnershipSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PartnershipSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PartnershipSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PartnershipSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PartnershipWhereInput
}

input PartnershipUpdateInput {
  partners: SimUpdateManyWithoutPartnersInput
  offspring: SimUpdateManyWithoutParentsInput
  createdBy: UserUpdateOneWithoutPartnershipsInput
}

input PartnershipUpdateManyWithoutCreatedByInput {
  create: [PartnershipCreateWithoutCreatedByInput!]
  connect: [PartnershipWhereUniqueInput!]
  disconnect: [PartnershipWhereUniqueInput!]
  delete: [PartnershipWhereUniqueInput!]
  update: [PartnershipUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [PartnershipUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input PartnershipUpdateManyWithoutPartnersInput {
  create: [PartnershipCreateWithoutPartnersInput!]
  connect: [PartnershipWhereUniqueInput!]
  disconnect: [PartnershipWhereUniqueInput!]
  delete: [PartnershipWhereUniqueInput!]
  update: [PartnershipUpdateWithWhereUniqueWithoutPartnersInput!]
  upsert: [PartnershipUpsertWithWhereUniqueWithoutPartnersInput!]
}

input PartnershipUpdateOneWithoutOffspringInput {
  create: PartnershipCreateWithoutOffspringInput
  connect: PartnershipWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PartnershipUpdateWithoutOffspringDataInput
  upsert: PartnershipUpsertWithoutOffspringInput
}

input PartnershipUpdateWithoutCreatedByDataInput {
  partners: SimUpdateManyWithoutPartnersInput
  offspring: SimUpdateManyWithoutParentsInput
}

input PartnershipUpdateWithoutOffspringDataInput {
  partners: SimUpdateManyWithoutPartnersInput
  createdBy: UserUpdateOneWithoutPartnershipsInput
}

input PartnershipUpdateWithoutPartnersDataInput {
  offspring: SimUpdateManyWithoutParentsInput
  createdBy: UserUpdateOneWithoutPartnershipsInput
}

input PartnershipUpdateWithWhereUniqueWithoutCreatedByInput {
  where: PartnershipWhereUniqueInput!
  data: PartnershipUpdateWithoutCreatedByDataInput!
}

input PartnershipUpdateWithWhereUniqueWithoutPartnersInput {
  where: PartnershipWhereUniqueInput!
  data: PartnershipUpdateWithoutPartnersDataInput!
}

input PartnershipUpsertWithoutOffspringInput {
  update: PartnershipUpdateWithoutOffspringDataInput!
  create: PartnershipCreateWithoutOffspringInput!
}

input PartnershipUpsertWithWhereUniqueWithoutCreatedByInput {
  where: PartnershipWhereUniqueInput!
  update: PartnershipUpdateWithoutCreatedByDataInput!
  create: PartnershipCreateWithoutCreatedByInput!
}

input PartnershipUpsertWithWhereUniqueWithoutPartnersInput {
  where: PartnershipWhereUniqueInput!
  update: PartnershipUpdateWithoutPartnersDataInput!
  create: PartnershipCreateWithoutPartnersInput!
}

input PartnershipWhereInput {
  """Logical AND on all given filters."""
  AND: [PartnershipWhereInput!]

  """Logical OR on all given filters."""
  OR: [PartnershipWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PartnershipWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  partners_every: SimWhereInput
  partners_some: SimWhereInput
  partners_none: SimWhereInput
  offspring_every: SimWhereInput
  offspring_some: SimWhereInput
  offspring_none: SimWhereInput
  createdBy: UserWhereInput
}

input PartnershipWhereUniqueInput {
  id: ID
}

type Query {
  sims(where: SimWhereInput, orderBy: SimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sim]!
  partnerships(where: PartnershipWhereInput, orderBy: PartnershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Partnership]!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  sim(where: SimWhereUniqueInput!): Sim
  partnership(where: PartnershipWhereUniqueInput!): Partnership
  user(where: UserWhereUniqueInput!): User
  simsConnection(where: SimWhereInput, orderBy: SimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): SimConnection!
  partnershipsConnection(where: PartnershipWhereInput, orderBy: PartnershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PartnershipConnection!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Sim implements Node {
  id: ID!
  createdAt: DateTime!
  firstName: String!
  lastName: String!
  parents(where: PartnershipWhereInput): Partnership
  partners(where: PartnershipWhereInput, orderBy: PartnershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Partnership!]
  createdBy(where: UserWhereInput): User
}

"""A connection to a list of items."""
type SimConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [SimEdge]!
  aggregate: AggregateSim!
}

input SimCreateInput {
  firstName: String!
  lastName: String!
  parents: PartnershipCreateOneWithoutOffspringInput
  partners: PartnershipCreateManyWithoutPartnersInput
  createdBy: UserCreateOneWithoutSimsInput
}

input SimCreateManyWithoutCreatedByInput {
  create: [SimCreateWithoutCreatedByInput!]
  connect: [SimWhereUniqueInput!]
}

input SimCreateManyWithoutParentsInput {
  create: [SimCreateWithoutParentsInput!]
  connect: [SimWhereUniqueInput!]
}

input SimCreateManyWithoutPartnersInput {
  create: [SimCreateWithoutPartnersInput!]
  connect: [SimWhereUniqueInput!]
}

input SimCreateWithoutCreatedByInput {
  firstName: String!
  lastName: String!
  parents: PartnershipCreateOneWithoutOffspringInput
  partners: PartnershipCreateManyWithoutPartnersInput
}

input SimCreateWithoutParentsInput {
  firstName: String!
  lastName: String!
  partners: PartnershipCreateManyWithoutPartnersInput
  createdBy: UserCreateOneWithoutSimsInput
}

input SimCreateWithoutPartnersInput {
  firstName: String!
  lastName: String!
  parents: PartnershipCreateOneWithoutOffspringInput
  createdBy: UserCreateOneWithoutSimsInput
}

"""An edge in a connection."""
type SimEdge {
  """The item at the end of the edge."""
  node: Sim!

  """A cursor for use in pagination."""
  cursor: String!
}

enum SimOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type SimPreviousValues {
  id: ID!
  createdAt: DateTime!
  firstName: String!
  lastName: String!
}

type SimSubscriptionPayload {
  mutation: MutationType!
  node: Sim
  updatedFields: [String!]
  previousValues: SimPreviousValues
}

input SimSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [SimSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [SimSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SimSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: SimWhereInput
}

input SimUpdateInput {
  firstName: String
  lastName: String
  parents: PartnershipUpdateOneWithoutOffspringInput
  partners: PartnershipUpdateManyWithoutPartnersInput
  createdBy: UserUpdateOneWithoutSimsInput
}

input SimUpdateManyWithoutCreatedByInput {
  create: [SimCreateWithoutCreatedByInput!]
  connect: [SimWhereUniqueInput!]
  disconnect: [SimWhereUniqueInput!]
  delete: [SimWhereUniqueInput!]
  update: [SimUpdateWithWhereUniqueWithoutCreatedByInput!]
  upsert: [SimUpsertWithWhereUniqueWithoutCreatedByInput!]
}

input SimUpdateManyWithoutParentsInput {
  create: [SimCreateWithoutParentsInput!]
  connect: [SimWhereUniqueInput!]
  disconnect: [SimWhereUniqueInput!]
  delete: [SimWhereUniqueInput!]
  update: [SimUpdateWithWhereUniqueWithoutParentsInput!]
  upsert: [SimUpsertWithWhereUniqueWithoutParentsInput!]
}

input SimUpdateManyWithoutPartnersInput {
  create: [SimCreateWithoutPartnersInput!]
  connect: [SimWhereUniqueInput!]
  disconnect: [SimWhereUniqueInput!]
  delete: [SimWhereUniqueInput!]
  update: [SimUpdateWithWhereUniqueWithoutPartnersInput!]
  upsert: [SimUpsertWithWhereUniqueWithoutPartnersInput!]
}

input SimUpdateWithoutCreatedByDataInput {
  firstName: String
  lastName: String
  parents: PartnershipUpdateOneWithoutOffspringInput
  partners: PartnershipUpdateManyWithoutPartnersInput
}

input SimUpdateWithoutParentsDataInput {
  firstName: String
  lastName: String
  partners: PartnershipUpdateManyWithoutPartnersInput
  createdBy: UserUpdateOneWithoutSimsInput
}

input SimUpdateWithoutPartnersDataInput {
  firstName: String
  lastName: String
  parents: PartnershipUpdateOneWithoutOffspringInput
  createdBy: UserUpdateOneWithoutSimsInput
}

input SimUpdateWithWhereUniqueWithoutCreatedByInput {
  where: SimWhereUniqueInput!
  data: SimUpdateWithoutCreatedByDataInput!
}

input SimUpdateWithWhereUniqueWithoutParentsInput {
  where: SimWhereUniqueInput!
  data: SimUpdateWithoutParentsDataInput!
}

input SimUpdateWithWhereUniqueWithoutPartnersInput {
  where: SimWhereUniqueInput!
  data: SimUpdateWithoutPartnersDataInput!
}

input SimUpsertWithWhereUniqueWithoutCreatedByInput {
  where: SimWhereUniqueInput!
  update: SimUpdateWithoutCreatedByDataInput!
  create: SimCreateWithoutCreatedByInput!
}

input SimUpsertWithWhereUniqueWithoutParentsInput {
  where: SimWhereUniqueInput!
  update: SimUpdateWithoutParentsDataInput!
  create: SimCreateWithoutParentsInput!
}

input SimUpsertWithWhereUniqueWithoutPartnersInput {
  where: SimWhereUniqueInput!
  update: SimUpdateWithoutPartnersDataInput!
  create: SimCreateWithoutPartnersInput!
}

input SimWhereInput {
  """Logical AND on all given filters."""
  AND: [SimWhereInput!]

  """Logical OR on all given filters."""
  OR: [SimWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [SimWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  firstName: String

  """All values that are not equal to given value."""
  firstName_not: String

  """All values that are contained in given list."""
  firstName_in: [String!]

  """All values that are not contained in given list."""
  firstName_not_in: [String!]

  """All values less than the given value."""
  firstName_lt: String

  """All values less than or equal the given value."""
  firstName_lte: String

  """All values greater than the given value."""
  firstName_gt: String

  """All values greater than or equal the given value."""
  firstName_gte: String

  """All values containing the given string."""
  firstName_contains: String

  """All values not containing the given string."""
  firstName_not_contains: String

  """All values starting with the given string."""
  firstName_starts_with: String

  """All values not starting with the given string."""
  firstName_not_starts_with: String

  """All values ending with the given string."""
  firstName_ends_with: String

  """All values not ending with the given string."""
  firstName_not_ends_with: String
  lastName: String

  """All values that are not equal to given value."""
  lastName_not: String

  """All values that are contained in given list."""
  lastName_in: [String!]

  """All values that are not contained in given list."""
  lastName_not_in: [String!]

  """All values less than the given value."""
  lastName_lt: String

  """All values less than or equal the given value."""
  lastName_lte: String

  """All values greater than the given value."""
  lastName_gt: String

  """All values greater than or equal the given value."""
  lastName_gte: String

  """All values containing the given string."""
  lastName_contains: String

  """All values not containing the given string."""
  lastName_not_contains: String

  """All values starting with the given string."""
  lastName_starts_with: String

  """All values not starting with the given string."""
  lastName_not_starts_with: String

  """All values ending with the given string."""
  lastName_ends_with: String

  """All values not ending with the given string."""
  lastName_not_ends_with: String
  parents: PartnershipWhereInput
  partners_every: PartnershipWhereInput
  partners_some: PartnershipWhereInput
  partners_none: PartnershipWhereInput
  createdBy: UserWhereInput
}

input SimWhereUniqueInput {
  id: ID
}

type Subscription {
  sim(where: SimSubscriptionWhereInput): SimSubscriptionPayload
  partnership(where: PartnershipSubscriptionWhereInput): PartnershipSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  email: String!
  password: String!
  sims(where: SimWhereInput, orderBy: SimOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Sim!]
  partnerships(where: PartnershipWhereInput, orderBy: PartnershipOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Partnership!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  email: String!
  password: String!
  sims: SimCreateManyWithoutCreatedByInput
  partnerships: PartnershipCreateManyWithoutCreatedByInput
}

input UserCreateOneWithoutPartnershipsInput {
  create: UserCreateWithoutPartnershipsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSimsInput {
  create: UserCreateWithoutSimsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutPartnershipsInput {
  name: String!
  email: String!
  password: String!
  sims: SimCreateManyWithoutCreatedByInput
}

input UserCreateWithoutSimsInput {
  name: String!
  email: String!
  password: String!
  partnerships: PartnershipCreateManyWithoutCreatedByInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  email: String
  password: String
  sims: SimUpdateManyWithoutCreatedByInput
  partnerships: PartnershipUpdateManyWithoutCreatedByInput
}

input UserUpdateOneWithoutPartnershipsInput {
  create: UserCreateWithoutPartnershipsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutPartnershipsDataInput
  upsert: UserUpsertWithoutPartnershipsInput
}

input UserUpdateOneWithoutSimsInput {
  create: UserCreateWithoutSimsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutSimsDataInput
  upsert: UserUpsertWithoutSimsInput
}

input UserUpdateWithoutPartnershipsDataInput {
  name: String
  email: String
  password: String
  sims: SimUpdateManyWithoutCreatedByInput
}

input UserUpdateWithoutSimsDataInput {
  name: String
  email: String
  password: String
  partnerships: PartnershipUpdateManyWithoutCreatedByInput
}

input UserUpsertWithoutPartnershipsInput {
  update: UserUpdateWithoutPartnershipsDataInput!
  create: UserCreateWithoutPartnershipsInput!
}

input UserUpsertWithoutSimsInput {
  update: UserUpdateWithoutSimsDataInput!
  create: UserCreateWithoutSimsInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  password: String

  """All values that are not equal to given value."""
  password_not: String

  """All values that are contained in given list."""
  password_in: [String!]

  """All values that are not contained in given list."""
  password_not_in: [String!]

  """All values less than the given value."""
  password_lt: String

  """All values less than or equal the given value."""
  password_lte: String

  """All values greater than the given value."""
  password_gt: String

  """All values greater than or equal the given value."""
  password_gte: String

  """All values containing the given string."""
  password_contains: String

  """All values not containing the given string."""
  password_not_contains: String

  """All values starting with the given string."""
  password_starts_with: String

  """All values not starting with the given string."""
  password_not_starts_with: String

  """All values ending with the given string."""
  password_ends_with: String

  """All values not ending with the given string."""
  password_not_ends_with: String
  sims_every: SimWhereInput
  sims_some: SimWhereInput
  sims_none: SimWhereInput
  partnerships_every: PartnershipWhereInput
  partnerships_some: PartnershipWhereInput
  partnerships_none: PartnershipWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
